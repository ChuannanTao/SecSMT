.PHONY: build test clean run summary info

.DEFAULT_GOAL := init
SHELL := /bin/bash
CC = g++
CPPFLAGS = -O2 -m64
LDFLAGS = -lpthread
COUNTERS = 2
sources = cpugetinfo.cpp 
LOGLEVEL ?= INFO
COMMON = common


#get the architecture 
GETCPUINFO = $(COMMON)/cpugetinfo
CPU_VENDOR = $(shell grep -m 1 'vendor' /proc/cpuinfo | cut -d ":" -f2)
ARCH_UNSTRPI = $(patsubst  GenuineIntel, intel, $(CPU_VENDOR))
ARCH_UNSTRP = $(patsubst  AuthenticAMD, amd, $(ARCH_UNSTRPI))
ARCH = $(strip $(ARCH_UNSTRP))
# ARCH = intel

TRIALS = 10
CHANNEL_NAMES := $(wildcard covert_*_$(ARCH))

info: 
	$(info $$CPU_VENDOR is [${CPU_VENDOR}])
	$(info $$ARCH_UNSTRP is [${ARCH_UNSTRP}])
	$(info $$ARCH is [${ARCH}])
	$(info $$TRIALS is [${TRIALS}])


GETCPUINFO: $(GETCPUINFO).cpp
	@$(CC)  $^ -c $(CPPFLAGS) -o$@


$(COMMON)/cpuinfo.txt: $(GETCPUINFO)
	@echo Creating file $@
	@$(GETCPUINFO) instructionsets > $@
	@echo " no32bit " >> $@

$(COMMON)/countertypes.inc: $(COMMON)/cpuinfo.txt
	@echo Creating file $@
	@echo  "; This file is autogenerated. Edit vars.sh and init.sh instead"  > $@
	@echo  "; Operating system:"  >> $@
	@echo  "%define `$(GETCPUINFO) system` 1"  >>$@
	@echo  "; CPU:"  >> $@
	@echo  "%define CPUbrand `$(GETCPUINFO) vendor`"  >> $@
	@echo  "%define ifamily `$(GETCPUINFO) family`"  >> $@
	@echo  "%define imodel `$(GETCPUINFO) model`"  >> $@
	@echo   "; Define whether AVX and YMM registers used"  >> $@
	@if   [ `grep -c -i "avx" $(COMMON)/cpuinfo.txt ` -ne 0 ] ; then \
		echo  "%define  USEAVX   1"  >> $@ ; \
	else \
		echo  "%define  USEAVX   0"  >> $@ ; \
	fi
	@echo  "; Processor List:"  >> $@
	@echo  "%ifndef processors"  >> $@
	@echo  %define processors \
	$(shell grep -H . /sys/devices/system/cpu/cpu*/topology/thread_siblings_list |grep cpu1/ | cut -d ":" -f 2 | cut -d "," -f1),\
	$(shell grep -H . /sys/devices/system/cpu/cpu*/topology/thread_siblings_list |grep cpu1/ | cut -d ":" -f 2 | cut -d "," -f2),\
	$(shell grep -H . /sys/devices/system/cpu/cpu*/topology/thread_siblings_list |grep cpu2/ | cut -d ":" -f 2 | cut -d "," -f1),\
	$(shell grep -H . /sys/devices/system/cpu/cpu*/topology/thread_siblings_list |grep cpu3/ | cut -d ":" -f 2 | cut -d "," -f1) >> $@
	@echo  "%endif"  >> $@

init: $(COMMON)/countertypes.inc $(COMMON)/cpuinfo.txt

clean: $(addprefix clean-,$(CHANNEL_NAMES)) 
	$(RM) $(COMMON)/countertypes.inc $(COMMON)/cpuinfo.txt

clean-%:
	cd $* && $(MAKE) clean


.PRECIOUS: %/channel_results.csv
%/channel_results.csv:
	cd $* && $(MAKE) LOGLEVEL=$(LOGLEVEL);

test-%: %/channel_results.csv
	echo "$*, `cat $^`" >> results.csv


.PRECIOUS: results.csv
test-stress-%: %/channel_results.csv
	for ((i=1; i <= $(TRIALS); ++i)); do \
		cd $* && $(MAKE) clean && $(MAKE); \
		cd ..; \
		echo "$*, `cat $^`" >> results.csv; \
	done

summary:
	./summary.py 

test: $(COMMON)/countertypes.inc $(COMMON)/cpuinfo.txt $(addprefix test-,$(CHANNEL_NAMES))  

run: $(COMMON)/countertypes.inc $(COMMON)/cpuinfo.txt $(addprefix test-stress-,$(CHANNEL_NAMES)) summary  



